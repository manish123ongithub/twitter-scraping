import snscrape.modules.twitter as sntwitter
import pandas as pd
import streamlit as st
import pymongo

def mongo(df):
    client = pymongo.MongoClient("mongodb://localhost:27017/")
    mydb = client["twitter"]
    mycoll = mydb[f"{search}_tweet"]
    df.reset_index(inplace=True)
    data_dict = df.to_dict("records")
    mycoll.insert_one({"index":f"{search}","data":data_dict})
    st.success("Uploaded Successfully!", icon='âœ…')
    st.ballons()
    collections = mydb.list_collection_names()
    st.write("List of collection that already exists : ")
    # for i in collections:
    st.write(collections)
    
    
tweets_list1 = []
with st.form("my_form"):
    default_since = '2020-06-01'
    default_untill = '2020-07-31'
    search = st.text_input("Enter keywords you want to search : ")
    since = st.text_input("Enter start date :",default_since)
    untill = st.text_input("Enter start date :",default_untill)
    maxtweets = st.slider("Enter count:")
    maxTweets = int(maxtweets)
    Summit = st.form_submit_button('Submit')
    if Summit:
        passing = (f'{search} since:{since} untill:{untill}')
        for i,tweet in enumerate(sntwitter.TwitterSearchScraper(passing).get_items()):
            if i > maxTweets:
                break
            tweets_list1.append([tweet.date, tweet.id, tweet.content, tweet.user.username, tweet.url, tweet.replyCount, tweet.retweetCount, tweet.lang, tweet.likeCount ])
            
            
            
tweets_df1 = pd.DataFrame(tweets_list1, columns = ['DateTime', 'Tweet_ID', 'Content', 'User_Name', 'url', 'Reply_Count', 'Re_Tweet_Count', 'Language', 'Like_Count'])
st.write(tweets_df1)
  
with st.form("form"):
   st.write("Press Enter to upload dataset into mongoDB : ")
   enter = st.form_submit_button("Enter")
   if enter:
       mongo(tweets_df1)
        
        
def convert_df(df):
       return df.to_csv(index = False).encode('utf-8')
        
csv = convert_df(tweets_df1)
 
 
st.download_button(
"Press to download the dataframe to csv format",
csv,
f"{search}_tweet.csv",
"text/csv",
key = 'download-csv'
)
 
 
def convert_json(df):
    return df.to_json().encode('utf-8')
    
    
json = convert_json(tweets_df1)
st.download_button(
"Press to download to json format",
json,
f"{search}_tweet.json",
"text/json",
key = 'download-json'
)
